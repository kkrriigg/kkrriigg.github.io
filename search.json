[{"title":"把 ChatGPT 接入微信和 telegram（电报）就这么简单","path":"/blog/2023/02/17/ChatGPT接入微信/","content":"把 ChatGPT 接入微信和 telegram（电报）就这么简单！ 第1步：获取自己 ChatGPT 的 apikey 【**获取地址**】 登入后即可获取 第2步：安装VPS 【**购买地址**】首冲20美金，可以免费获得100美金的使用额度 第3步：登入自己的VPS，SSH【客户端下载】 【重要提醒】：如果你对Linux系统的命令不是很清除，那么请严格按照的我的教程来操作，系统一样选择 Debian 【视频教程】 登入以后先执行环境安装命令： sudo apt-get install git sudo apt-get install golang A.把ChatGPT接入到微信上1234567891011# 获取项目$ git clone https://github.com/ZYallers/chatgpt_wechat_robot.git# 进入项目目录$ cd chatgpt_wechat_robot# 复制配置文件$ cp config.dev.json config.json# 启动项目$ go run main.go B.把ChatGPT接入到Telegram （电报）上1.在电报上搜索 BotFather ，如图第一个。点击BotFather后，在对话框下方点击开始与BotFather对话 点击命令 &#x2F;newbot 按照引导依次输入。 机器人昵称：ChatGPT-LD 机器人用户名：chatgpt_ld_bot （必须_bot结尾） 最后回复内容是机器人创建成功！红框内的字符串为该机器人的Token（重要信息不能轻易泄露给别人）。 2.然后回到自己的VPS上执行安装nodejs命令： curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - sudo apt-get install nodejs 3.安装pm2守护进程，一会要用到 npm install pm2 -g 4.然后下载并安装接入的机器人 git clone https://github.com/harshitethic/chatgpt-bot-telegram.git cd chatgpt-bot-telegram npm install 5.复制一个.env文件，然后修改配置文件。注意：编辑文件的时候请使用Notepad++或者Editplus ，否则可能会造成编码出错 .env 直接编辑 .env 文件 API &#x3D; 就是你在openAI官网上生成的apikey TG_API &#x3D; 就是telegram机器人生成的token 5.保存好配置文件后，启动执行下方的启动命令，就可以和机器人聊天了！ pm2 start index.js 大功告成！ C.最后提醒下的是，如果需要在后台守护进程运行 那么只需运行下面命令 apt-get install screen screen -S chatgpt 运行以后再运行之前的命令就可以了， 启动成功后，按Ctrl +A+D 即可挂起后台服务。 想看运行情况 1screen -R chatgpt 就可以查看了~ 这样即使你断开VPS，机器人也会在后台运行。","tags":["AI","ChatGPT"],"categories":["AI"]},{"title":"在github上搭建hexo博客","path":"/blog/2023/02/13/hexo_github/","content":"本文时间：2022&#x2F;02&#x2F;03安装包版本如下：NodejsLTS16.13.2Git2.35.0 成果预览 故人随笔nodejs安装1.双击安装包 2.Next 3.修改安装目录为 D:\\Develop odejs1 4.Next 5.Next 6.Install 7.Finish 8.打开命令提示符cmd 9.分别输入以下指令检测是否安装成功 node -vnpm -v12 10.进入安装目录 11.在nodejs文件夹内创建两个以下名称的文件夹 node_globalnode_cache12 12.创建完成后打开cmd指令分别输入以下两条指令 npm config set prefix “D:\\Develop odejs ode_global”npm config set cache “D:\\Develop odejs ode_cache”12 13.配置环境变量，“我的电脑➡右键➡属性➡高级系统设置➡高级➡环境变量” 14.用户变量下的path修改为 D:\\Develop odejs ode_global1 15.新建一个系统变量名称为 NODE_PATH1变量值为 D:\\Develop odejs ode_global ode_modules1 git安装1.打开安装包，next2.选择安装目录(目录在哪无所谓，我强迫症，新建太多文件夹难受，所以就都放在Develop文件夹) 3.Next直到结束4.Finish安装完成 通过ssh keys绑定GitHub1.注册GitHub提示填啥就填啥，注册个账户2.登录进去以后，点击new，新建一个仓库 存储库名称格式必须为 “username”.github.io [“username”是自己的用户名]1 3.打开cmd，执行以下指令生成ssh key ssh-keygen -t rsa -C “&#117;&#x73;&#x65;&#x72;&#x6e;&#x61;&#x6d;&#101;&#64;&#x65;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;“ [“&#x75;&#115;&#x65;&#x72;&#x6e;&#97;&#109;&#101;&#64;&#x65;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;“是github绑定的邮箱]1回车直到生成密钥生成的目录为 C:\\Users&quot;username”.ssh1 4.通过记事本或者编辑器打开摁下[ctrl + a]全选，复制打开GitHub并登录，点击头像➡Settings➡SSH and GPG keys➡New SSH key 5.绑定ssh keys title随便写Key将刚才复制的密钥粘贴进去点击Add SSH Key 6.在命令提示符cmd中原封不动输入以下指令 ssh -T &#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;1若回复为Hi “你的GitHub用户名”则为绑定成功 7.配置git，在cmd下输入以下命令 git config –global user.name “username” [“username”是自己的用户名]git config –global user.email “&#117;&#x73;&#101;&#114;&#110;&#x61;&#109;&#101;&#x40;&#x65;&#109;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#x6d;“ [“&#117;&#115;&#101;&#x72;&#x6e;&#97;&#109;&#101;&#64;&#x65;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;“是github绑定的邮箱]12hexo安装1.以管理员身份打开cmd，执行hexo全局安装指令 npm install hexo-cli -g12.输入以下指令检测hexo是否安装成功 hexo -v13.在D盘新建一个[blog]文件夹,并进入4.在blog文件夹下，右键➡Git Bash Here,进入命令行工具 5.输入初始化命令 hexo init1 这里非常容易报错，只要之前步骤没有任何改动，那么这里报错百分之九十是网络问题。解决方案1：清除缓存，多试几次解决方案2：用”科学”或者”魔法” 6.以下为初始化成功提示 7.打开blog文件夹下的”_config.yml”hexo配置文件，拉到最底部 deploy: type: git repo: &#x67;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;:0god23&#x2F;0god23.github.io.git branch: main1234“: “后边均有一个空格，请不要删除 repo: 请修改为自己创建的GitHub仓库的ssh url克隆链接如图 8.执行[hexo g]生成本地静态文件 9.执行以下命令安装 hexo-deplayer-git 依赖 npm install hexo-deployer-git –save110.执行[hexo d]部署到GitHub仓库，这里会有一个弹窗提示登陆github账号，登录即可 11.稍等几分钟即可部署生效访如下网址 username.github.io [“username”是自己的用户名]1成果展示如果安装成功的话，帮忙点分享一下博客，互友链 nodejs参考刘奇云大佬的文章 https://www.cnblogs.com/liuqiyun/p/8133904.html end————————————————版权声明：本文为CSDN博主「故人随笔」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/m0_66964652/article/details/122882957","tags":["hexo"],"categories":["hexo"]},{"title":"家用宽带无公网IP怎么在外访问Nas——Frp内网穿透暴露公网访问及微信回调简明教程","path":"/blog/2023/02/13/frp/","content":"路由与NAS 篇二十：家用宽带无公网IP怎么在外访问Nas——Frp内网穿透暴露公网访问及微信回调简明教程2022-07-07 10:39:56 24点赞 155收藏 60评论 写在前面本文主要基于微信回调需求整理的 frp 内网穿透脚本。最终效果就是通过一台带有公网 IP 的服务器实现通过在公网访问你的 Nas 上的应用因为确实涉及到服务器配置、命令行操作，有一定的门槛，我会尽量以新手友好的方式来分享教程 本文大纲如下，可按需选择感兴趣部分查看： 微信回调最初就是为了配置 NasTools 支持微信回调，实现微信搜索影片自动下载： 回调是由微信的服务器发起，需要提供一个 NasTools 的公网访问入口 目前使用的是移动宽带，只有公网 IPv6，没有提供公网 IPv4 企业微信回调目前不支持 IPv6 那么最终就只能做利用内网穿透代理来暴露公网了文章篇幅原因且企业微信回调支持通过 IP 访问，本文未涉及域名及Https配置 内网穿透内网穿透软件，之前也有介绍过 ZeroTier 文章移动大内网搭建ZeroTier穿透访问Unraid详细教程丶Source22-06-0967 但 ZeroTier 更多是用于异地组网实现类似 VPN 的功能，不太适用于这个需求场景： 通过内网穿透，将 NasTools 的微信回调接口暴露到公网给企业微信应用发访问 而这恰恰是 frp 的目标场景，正如官网介绍的： frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。 其工作流程如下： 外网机器无法访问到 Nas,但是 Nas 可以主动访问公网的 vps 在 Nas 运行 frpc 客户端主动与 vps 上的 frps 服务端建立连接 运行在公网 vps 的 frps 服务端将特定端口的请求转发给 Nas 通过在公网 vps 上进行内网穿透代理，最终实现了企业微信回调访问 NasTools 准备工作在配置内网穿透前需要完成以下前提条件： 前提条件 作用 一台有公网 IPv4 的 vps 部署 frps 提供穿透代理 支持通过 ssh 登录到服务器的终端 登录 vps 进行命令行配置 内网穿透软件 本文选择了 frp 作为内网穿透工具 针对 vps 的选择，可以考虑： 国内的大厂提供的 vps，如腾讯云、阿里云、华为云等等 仅用于做内网穿透代理，使用最低配置即可，但必须要分配独占的公网 IP 不做其他用途的话，1Mbps 的带宽就足够提供回调访问了 选择 linux 系统，如 debian、ubuntu、centos 等 具体的 vps 购买及系统安装，厂商提供的教程已经非常全了，这里就不再展开细说 服务端配置安全组开放端口 这里以目前我使用的腾讯云为例，仅列出关键步骤，完整操作见官网文档 完成 vps 购买及系统初始化后，需要规划服务器端口开放，有两种方式： 放通所有端口，相当于不做任何访问控制 放通自定义端口，仅开放指定的端口暴露公网，其他端口则不允许访问 嫌配置麻烦的话，可以选第一种，牺牲一定的安全性来换取便利 以腾讯云为例，新增一个安全组选择放通全部端口模版，然后关联 vps 实例即可但更推荐按照最小权限开放来配置允许特定端口，也就是选择自定义模版 然后手动配置入站规则，也就是将需要暴露的端口开放访问，具体如下 端口用途 默认 推荐端口 ssh 登录端口 22 一般保持默认 22 端口即可 frps 服务端连接端口 5443 建议设置随机端口，如 44443 frps 仪表盘管理界面 6443 建议设置随机端口，如 44444 frps 穿透代理 NasTools 端口 无 建议设置随机端口，如 44445 在本文场景下最终需要用到的就是上述 4 个端口，frps 其他端口不是必须的 在刚才新建的自定义安全组中修改安全规则，添加入站规则： 来源 设置0.0.0.0/0表示允许所有来源 IP 协议端口设置 TCP:22、TCP44443-44445 开放上述提到的端口 策略 选择允许 备注 自己随便填，这里我填了ssh 、frp 最后记得关联到云服务器 vps 生效，具体操作见官网文档 SSH登录服务器 这里主要介绍 windows 下的登录场景，如果是 macOS 可使用 iterm2 命令行登录 因为 frp 服务端需要登录到 vps 服务器上配置，因此需要一款 ssh 登录软件这里以 putty 为例，其他还有 xshell 甚至 windows wsl 自带的 ssh client，自行选择 进入 putty官网 后点击 Download PuTTY 跳转到下载页面 找到 Alternative binary files 下载免安装版本 目前大部分 Windows 都是 64 位版本了，因此下载 64-bit x86 版本 下载后双击运行，进入 putty 配置页面准备登录服务器 运行之后开始登录服务器： 在 Host Name 部分输入你的 vps 分配的 IP Port 保持默认的 22 端口，除非你有修改过 ssh 服务的端口 最后点击 Open 按钮开始登录 因为是第一次连接到这台 vps 服务器，所以会有这个提示，点击 ACCEPT 即可 之后就是输入你 vps 的登录用户及密码完成登录配置 因为我主要是使用 macOS 因此下面的涉及到命令行操作都是在 iterm2 中完成 配置 frps 服务端通过 ssh 登录服务器之后，使用一键配置脚本来部署 frps，复制以下命令执行： wget https://code.aliyun.com/MvsCode/frps-onekey/raw/master/install-frps.sh -O &#x2F;tmp&#x2F;install-frps.shbash &#x2F;tmp&#x2F;install-frps.sh install 首先会自动进行基础环境的检查，并安装相关的依赖软件，然后就开始进入配置页面 如上图提示是希望从哪里下载 frps 服务端软件： 这里保持默认阿里云即可，接下来设置 frps 服务端的监听端口，我使用44443端口： 仪表盘信息部分也需要进行调整： 仪表盘端口调整为随机端口，这里我使用44444端口 仪表盘登录的用户密码按需进行修改 其他参数全部保持默认，一直按回车就行，Token 建议保持随机字符串最后会输出最终详情，记得保存下来方便后续使用 配置完成后，再通过以下命令来确定 frps 已经正常运行：frps status 之后访问 dashboard 并输入用户名密码登录，能看到这个页面就是已经配置完成 客户端配置因为我们的目标是将 NasTools 的回调接口，那么 frpc 客户端可选择就有： 运行在路由器上，并配置代理到 Nas 上的 Nastools 入口 运行 Nas 上，并代理到本机的 NasTools 入口 可以根据自己实际情况来选择对应方案，下文会分别介绍具体的配置方式 Openwrt 部署 frpc以 openwrt 为例，目前大部分的 op 固件会内置 frp 内网穿透如果你的固件没有内置，也可自行下载安装：系统 - 软件包 - 过滤器 输入 frpc 需要安装以下两个软件包（如果没有搜到的话，需要刷新一下列表） frpc 二进制可执行文件 luci-app-frpc 在 openwrt 提供 frpc 配置页面，这样就不需要进入命令行配置 尽量选择与你部署的 frps 服务端相同或接近的版本，版本想差太多无法保证功能可用 之后就可以在 openwrt 管理后台 服务 页面下找到 frp 内网穿透进行配置： 勾选 启用 填入服务器及端口 令牌 则是我们生成的 Token 其他参数保持默认即可 接下来拉到服务列表点击添加按钮开始将 NasTools 暴露到公网： Enable State 设置为启用 使用 TCP 类型即可，VPS 暴露端口为 44445，这个端口已经开放了安全组 内网设置到 NasTools 的入口，我的是10.0.0.2:3000，按照你自己的修改 服务备注名 设置一个唯一标识，当你同时通过 frp 暴露多个服务时需要区分开来 建议开启数据加密，以保证 vps 到路由器之间的数据传输安全 配置完成后点击保存&amp;应用，回到 frp 主页还需要在点击一次保存&amp;应用 至此，路由器配置 frpc 完成 Nas 部署 frpc如果是在 Nas 上，则建议通过 docker 来部署 frpc我使用的镜像是 snowdreamtech/frpc，如果是通过 docker 命令启动，可参考： 但在如果是 Unraid 的话，建议使用我的模版仓库shuosiw/unraid，使用方式见 文章Nas资源自动下载刮削整理一体化平台——快速上手NasTools（上）丶Source22-06-2455 添加模版之后，点击 ADD CONTAINER 并选择 frpc 模版即可 如无特殊需求使用默认参数即可，之后点击下方的 APPLY 按钮启用但回到 Docker 页面还是处于 stop 状态，这是因为没有配置文件，需要手动添加 在 unraid 上创建/mnt/user/appdata/frp/frpc.ini文件并写入如下配置： [common]token&#x3D;JwxXzxTTLbvKY2mnserver_addr&#x3D;xx.xx.xx.xxserver_port&#x3D;44443user&#x3D;Unraidlog_level&#x3D;infoprotocol&#x3D;tcpadmin_addr&#x3D;0.0.0.0admin_port&#x3D;7400tcp_mux&#x3D;truelogin_fail_exit&#x3D;true [Nastool-Wechat]type&#x3D;tcpremote_port&#x3D;44445local_ip&#x3D;10.0.0.2local_port&#x3D;3000use_encryption&#x3D;trueuse_compression&#x3D;true 其中 common 部分有 3 个配置项需要按照实际情况调整： token 替换为你部署 frps 服务端时候设置或自动生成 Token server_addr 替换为你 vps 的公网 IP server_port 替换为你部署 frps 设置的服务端端口，也就是 bind_port 而 Nastool-Wechat也有 3 个需要按照实际情况调整： remote_port 替换为你最终在 vps 映射 NasTools 的端口 local_ip 替换为你的 Nas IP local_port 替换为你的 NasTools 映射端口 如果你熟悉命令行操作，可通过 unraid 管理后台 Terminal 进入网页版终端修改，或者先在电脑上通过文件编辑器写好之后，再上传到 /mnt/user/appdata/frp/目录下 注意文件名一定要为 frpc.ini，否则容器进程启动后会因为找不到配置文件而报错退出 之后回到 Unraid 容器管理界面点击 Start 启动 frpc 容器，此时可正常启动接下来在 Unraid 上 frpc 应用点击 WebUI 即可访问 或者使用 Nas IP + 7400 端口访问就可以看到主界面，比如我的是：10.0.0.2:7400 可以看到配置的应用已经启动了，后续有调整的话，也可以直接在 Configure 页面修改配置 验证穿透效果如果一切配置无误你就已经可以通过 VPS 的公网 IP 及 NasTools 映射端口来访问了 在我这次配置中，我分配了44445端口给到 NasTools 穿透代理映射浏览器会提示不安全，这是因为没有使用 https 加密，这是正常的提示 重新打开 frps 服务端的仪表盘页面，也可以看到刚才配置的穿透应用流量情况那么接下里就是将你的 vps 公网穿透代理 NasTools 入口添加到企业微信回调接口即可 文章你还在手动搜索下载、刮削整理海报墙？——微信回调及豆瓣对接自动化之NasTools（下）丶Source22-06-27137 之前的文章已经介绍得非常详细了，这里就不展开说了 写在后面写这篇文章时候有点无从下手的感觉，因为确实涉及到较多的命令行操作 smzdm 对命令指令的编辑及展示并不算太友好且有些值友对命令行操作也不是很熟悉 纠结了许久，最终效果就是这样了，也想了解一下值友对本文的易读性感觉如何。码字不易，多多点赞收藏，如果有任何疑问，可以评论我会定期回复。后续的一些优化，比如配置域名、ddns 以及设置微信回调白名单等等，可以考虑再出一些文章，如果你们有比较感兴趣的也可以评论回复。","tags":["frp"],"categories":["PT","NAS"]},{"title":"Flexget插件，增强对NexusPHP的过滤","path":"/blog/2023/02/13/flexget-nexusphp/","content":"flexget-nexusphpFlexget插件，增强对NexusPHP的过滤过滤条件包括种子优惠信息（free等）、做种者情况、下载者情况- 站点支持列表- 支持作者更多插件：IO过高时停止任务插件 免责声明本插件会爬取details.php页面，请将参数限制到合理的范围，减轻对服务器负担本插件已尽量减轻服务器负担，因本插件造成账号封禁等损失，请自行承担后果建议 将RSS条目限制在20条以内，将Flexget运行频率设置在10分钟以上。如果不想对人数进行过滤，不建议设置seeders和leechers参数。 运行环境 Flexget Python 3.X 或 Python 2.7 其他版本解决方案 安装插件 下载插件 nexusphp.py 在Flexget配置文件夹下新建plugins文件夹，例如：12~/.flexget/plugins/ # LinuxC:\\Users\\&lt;YOURUSER&gt;\\flexget\\plugins\\ # Windows 再次注意plugins文件夹和config.yml处在同一级目录下，例如：1234/.flxget ┕━config.yml ┕━plugins ┕━nexusphp.py 将插件拷贝至plugins 若启用了Web-UI或守护进程，则重启flexget重新加载配置 使用 编辑flexget配置文件，添加nexusphp选项，按照需要进行配置 简单配置1234nexusphp: cookie: &#x27;a=xxx; b=xxx&#x27; # 必填 discount: # 优惠信息 选填 - free 完整配置12345678910111213141516171819202122232425262728nexusphp: cookie: &#x27;a=xxx; b=xxx&#x27; # 必填 discount: # 优惠信息 选填 - free - 2x - 2x50% - 2xfree - 50% - 30% seeders: # 做种情况 选填（兼容性较差不建议使用） min: 1 max: 2 leechers: # 下载情况 选填（兼容性较差不建议使用） min: 10 max: 100 max_complete: 0.8 left-time: 1 hours # 优惠剩余时间 选填 hr: no # 是否下载HR 选填 adapter: # 站点适配器，自行适配站点，参考最下方常见问题 选填 free: free 2x: twoup 2xfree: twoupfree 30%: thirtypercent 50%: halfdown 2x50%: twouphalfdown comment: no # 在torrent注释中添加详情链接 选填 user-agent: xxxxxx # 浏览器标识 选填 remember: yes # 记住优惠信息 选填 请勿随意设置 为rss的other_fields字段添加link属性123rss: url: https://www.example.com/rss other_fields: [link] 启动flexget123flexget execute# 如果仅仅想要测试而不下载，可以添加 --test 参数flexget --test execute 详细配置 cookie 网站cookie 必须填写 discount 优惠类型 默认不限制优惠类型。列表类型，Flexget会只下载含有列表内优惠类型的种子。有效值：free 2x 2x50% 2xfree 50% 30%注意：x为英文字母 seeders 做种情况 做种人数超出范围的，Flexget将不会下载 注意：此选项兼容性较差 min 最小做种人数。整数，默认不限制 max 最大做种人数。整数，默认不限制 leechers 下载情况 下载人数超出范围的，Flexget将不会下载 注意：此选项兼容性较差 min 最小下载人数。整数，默认不限制 max 最大下载人数。整数，默认不限制 max_complete 下载者中最大完成度 超过这个值将不下载。小数，范围0-1.0，默认为1 left-time 最小剩余时间 当实际剩余时间小于设置的值，则不下载。时间字符串，例如 3 hours、10 minutes、1 days。例如设置1 hours，优惠剩余59分钟，那么就不下载。默认不限制 hr 是否下载HR种 默认 yes yes 会下载HR，即不过滤HR no 不下载HR adapter 站点适配器 站点不兼容时可自定义，具体参考判断站点以及适配站点 comment 在torrent注释中添加详情链接 yes 在torrent注释中添加详情链接，方便在BT客户端查看 no 默认值 user-agent 浏览器标识 默认为Google浏览器 remember 记住优惠信息 不建议设置为 no，因为会增大站点压力。默认 yes 完整配置示例免费热种123456789101112tasks: my-free-task: rss: url: https://www.example.com/rss.xml other_fields: - link nexusphp: cookie: &#x27;a=xxx; b=xxx&#x27; discount: - free - 2xfree download: ~/flexget/torrents/ 热种12345678910111213tasks: my-hot-task: rss: url: https://www.example.com/rss.xml other_fields: - link nexusphp: cookie: &#x27;a=xxx; b=xxx&#x27; seeders: min: 1 leechers: min: 20 download: ~/flexget/torrents/ 避免HR12345678910tasks: no-hr-task: rss: url: https://www.example.com/rss.xml other_fields: - link nexusphp: cookie: &#x27;a=xxx; b=xxx&#x27; hr: no download: ~/flexget/torrents/ 常见问题我的python版本是2.X如何使用？本插件只支持Python 3.X或Python 2.7版本，其他版本不可用，请卸载Flexget后使用Python3重装 12pip uninstall flexget # 卸载pip3 install flexget # 使用pip3安装 目前支持哪些站点如果站点禁止使用脚本爬虫，应立即停止使用本插件 任何未修改关键结构的nexusphp站点 PTH MT（站点安全性较高，ip或浏览器变动可能无法访问） OB Sky School U2 CHD TJU（禁止脚本，请勿使用） SSD OpenCD TTG（不支持人数筛选） FRDS Dream HDC LemonHD 如何判断站点是否支持判断站点以及适配站点 确认cookie正确，还是提示 Can’t access the site. Your cookie may be wrong!某些站点安全性要求较高，ip或浏览器变动时无法使用cookie访问，需要重新登录。解决办法：设置 user-agent 参数与浏览器相同，查看浏览器user-agent的方法自行搜索，并保证登录ip与使用Flexget相同。 站点启用了Cloudflare五秒盾无法获取信息当触发Cloudflare五秒盾通常有以下提示： 1NexusPHP._get_info: 503 Server Error: Service Temporarily Unavailable for url 解决方案也很简单，可以考虑使用Flexget官方内置的插件cfscraper 首先需要安装依赖1pip install cloudscraper 然后启用1cfscraper: yes 注意！绕过站点安全机制可能有风险，自行决定是否使用","tags":["flexget"],"categories":["PT"]},{"title":"Natter，不需要中转的内网穿透工具","path":"/blog/2023/02/12/natter/","content":"Natter帮助 Full cone NAT (NAT 1) 用户打开公网 TCP 端口。 交流群组：Q 657590400 | TG 更多实验性功能（UDP等），见 v0.9 分支。 由 Natter 衍生的 C 语言实现 (@heiher)：NATMap 使用例在本地 3456 号 TCP 端口上实行 TCP 打洞，并开启测试用 HTTP 服务： 1python natter.py -t 3456 成功打洞后： 使用外部网络访问该公网地址 http://203.0.113.10:14500/，可见 It works! 字样： 打洞测试成功后，可以去掉 -t 选项，然后将 3456 端口转发至您想要的目标地址上。 转发方法您可以这样设置端口转发： 在 OpenWRT 网页端中「网络」 - 「防火墙」 - 「端口转发」，填写以下信息： 协议 外部端口 内部 IP 地址 内部端口 TCP 3456 192.168.1.100 443 此时，我们在 OpenWRT 上使用 Natter 在 3456 号端口进行打洞，即可向外网暴露 192.168.1.100:443 。 1python natter.py 3456 原理图 方案 推荐方案：光猫设置桥接模式，在路由器系统如 OpenWRT 上直接运行 Natter（仅经过一层 NAT） 可行方案：在子网中的主机上运行 Natter，在光猫或路由器上对其开启 DMZ 功能，或对需要开放的端口设置端口转发。（经过多层NAT） 大概率会失败的情形 不满足基本条件：经过测试，我的网络不是 NAT 1； 多层非可控 NAT：光猫处于路由模式，我无法关闭光猫的防火墙，并对其设置 DMZ 主机或改桥接； 运营商设置了防火墙：我在外部网络使用 nmap 对出口 IP 地址进行 TCP 全端口扫描，发现均为 filtered 。 错误解读 &amp; 解决方法1This OS or Python does not support reusing ports! 此操作系统或者 Python 不支持端口重用。解决方法： 推荐使用内核版本 4.0+ 的 Linux 系统。 1No public STUN server is avaliable. Please check your Internet connection. 没有可用的公共 STUN 服务器。请检查您的网络连接。解决方法： 检查网络，检查防火墙是否阻止 TCP&#x2F;UDP 端口 3478。如果是脚本内置列表中的服务器不可用，请提 issue。 1You cannot perform TCP hole punching in a symmetric NAT network. 您无法在一个对称型 NAT 网络中实行 TCP 打洞。解决方法： 此网络无法打洞。检查您的网络拓扑。检查您是否处于多层 NAT 下。 1TCP hole punching seems to fail. Maybe you are behind a firewall. TCP 打洞似乎失败了。您可能处于防火墙下。解决方法： 如果外部网络可以访问 Natter 提供的地址，请忽略此条信息。尝试关闭光猫的防火墙。如果处于多层 NAT 下，请在光猫或路由器下设置 DMZ 主机或者端口转发。如果上述方案不能解决改问题，则是运营商设置了防火墙，此网络无法开放 TCP 端口。","tags":["Natter"],"categories":["Natter"]},{"title":"省心的馒头保号教程","path":"/blog/2023/02/12/省心的馒头保号教程/","content":"省心的馒头保号教程这是一个省心的馒头保号教程，可以轻而易举地把馒头刷到保号，甚至不花一分钱就能刷 50 TB 上传量。让我们告别上传量不够的烦恼，更沉浸于观影的快乐。 盒子是什么？ 我的理解：在 PT 里，盒子是装有 qBittorrent 等这一系列软件的云服务器，类似于家中一台 24 小时持续运行且有公网 IP 的电脑；按用途来分，多用于刷流，极少部分用于保种。 教程思路Hetzner 介绍Hetzner 是一家数据中心运营商，他家服务器性能强劲、上行带宽大，大家都喜欢买他家的服务器来刷流。 点击展开，查看 Hetzner 服务器性能 刷大包思路因为 Hetzner 服务器计费方式是按小时计费，用了几个小时就给你算几个小时的钱。我往往是周末大包出来后用快照批量开多台服务器，一台服务器一个大包，等大包没速度了就删服务器，按小时计费这样更省钱。我一般买 CPX11 这款来刷馒头大包，性价比高，本文也以此机型举例。CPX11 在安装完刷流系统后，硬盘还有 31 GB 的剩余空间。我开多台服务器，一台服务器一个大包，选大包里的 30 GB 下载，也不用担心下少了上传跑不动，这是我上周跑的情况： 2022 年 12 月 9 日这天，CPX11 的价格为 0.006 欧元一小时（折合人民币 0.044 元）。如果你是走别人推荐链接的话，可以白嫖 20 欧的试用金，不花钱就能刷 50 TB。 站点规则熟记规则，避免翻车 限速规则：单种上传速度小于 125 M&#x2F;s（即 125 MiB&#x2F;s），非 VIP 超速即封号。 我的单种上传速度上限设置为 90000 KiB&#x2F;s，比较保守。 熟记规则，避免翻车 盒子规则： 下载种子时不享用任何种子促销 在种子发布 72 小时之内，最多只能得到种子体积大小的 3 倍流量（种子大小为 1 GB，上传最多只能得到 3 GB） 发布超过 72 小时后的种子统计的流量都是正常的 盒子规则对我们影响不大，原因如下： 大包中的绝大多数种子发布时间超过 72 小时，并不受 3 倍流量这一规则制约。 就算种子发布时间不足 72 小时，我们也不亏。打个比方：种子体积大小为 500 GB，3 倍流量则是 1500 GB，我们只下载了 30 GB，能赚 1470 GB，完全不亏；一般来说周末出大包，等睡一觉星期一早上起来就能有 3 倍上传了，如果某个种子受 3 倍流量这一规则制约，我们大可以汇报、删机、跑路，这台服务器就停止计费了。 Hetzner 注册工欲善其事，必先利其器，首先我们需要注册一个 Hetzner 账户。关于 Hetzner 的性能、注册等具体细节参考此文 【VPS选购分享】Hetzner——欧洲阿里云！性能小钢炮！非常适合跑业务，还有适合刷PT的神鸡！。由于我已经注册过了，无法注册新号，所以无法手把手演示，注册还算简单，结合参考文章就行，我复述一下注册过程： 点击他人的推荐链接（参考文章作者的推荐链接可用：https://loll.cc/hz） 选择无税区，使用真实 IP 和资料注册，不要开代理，姓名、地址、邮箱等要如实填写。 准备好身份证、手机，在注册完成后会进行人脸识别验证，通过验证才能开服务器。 如果忘了点别人的推荐链接注册，导致没有 20 欧试用金的话，这种情况下请勿开服务器，可以带上推荐链接联系客服手动添加。 官方解答：Q：Why is my referral Credit not visible in my account after I was invited by a friend?A：Please send a request to our support team by opening a support ticket via Cloud Console. Please also provide the link you used for the registration. 还可以前往 USAGE，在 REDEEM CODE 处输入 LTT23（ 2023 年可用的新兑换码，来自热心吧友的提醒），有几率再得 20 欧。 至于这送的两个 20 欧有效期是多少，我也不清楚，因为我当时注册什么也不懂，没用邀请链接，也没用 LTT23，亏大了。 另外，Hetzner 家的服务器没被其他站点禁止，这 20 或 40 欧元可以拿去开服务器刷其他站点 。但如果想刷其他站的话，一般来说： 效果：手动 &lt; qBittorrent 自带的 RSS + 正则表达式 &lt; 自动化工具； 配置难度：手动 &lt; qBittorrent 自带的 RSS + 正则表达式（可参考 无需安装任何软件，小白也能实现刷流） &lt; 自动化工具；其中自动化工具也不止一种，有简单的也有复杂的。最重要的是要充分熟悉站点的规则，才能刷流不翻车。 服务器选择SSH 客户端首先我们需要安装一个 SSH 客户端，以便能远程连接我们的云服务器。我使用的是 Xshell，也推荐大家使用这个，原因如下：Xshell 提供了非商业用途的免费版，且官方自带中文，比各种未知来源的破解版、汉化版更值得信赖。我们前往官方网站 https://www.xshell.com/zh/free-for-home-school/ 申请（请注意网址，别被流氓区代理忽悠了），填入你的邮箱，你将会收到两封含软件下载链接的邮件，点击下载并安装，把 Xshell、Xftp 都安上。 新建 SSH keysXshell 安装完成后打开，我们新建 SSH keys。SSH keys 能让我们方便、安全地登录到服务器，而无需输入密码。密钥类型推荐 ED25519，给用户密钥加密为可选项： 接下来我们把生成的公钥复制，并前往 Hetzner 控制台，进入项目，将其填入： 选择服务器因为我没白嫖到 20 欧，所以我选择 CPX11 这款来刷馒头大包，也够用；如果你们白嫖到了，大可以开更高配置的服务器或者挂载额外的硬盘。以下是我的服务器配置选择项： 区域：德国 镜像：Debian 10 服务器：CPX 11 网络：IPV4、IPV6 SSH keys：上一步填写的那个 连接服务器主机是服务器 IP，用户名为是 root，方法选择 Public Key，用户密钥即为前面生成的那个： 刷流系统安装服务器选择配置我们选用 Hetrzner 那款 CPX21，配置如下： 一点提议： 盒子卖方在交易时得提供一份如上图的性能测试结果，不然“千里马”盒子一点说服力也没用，莫拿破烂卖高价、坑小白。 创建按如下选项创建一台即可： 区域：德国 镜像：Debian 10 服务器：CPX 21 网络：IPV4、IPV6 安装刷流系统刷流系统介绍单纯从刷流来说，我们选用 jerry048&#x2F;Dedicated-Seedbox ，比我上篇教程里用的 QuickBox-Lite 更高效。 安装过程一键脚本依旧是一键脚本，如下，&lt;用户名称&gt;、&lt;用户密码&gt;、&lt;缓存大小(单位:GiB，且为整数)&gt; 需自己配置： 1bash &lt;(wget -qO- https://raw.githubusercontent.com/jerry048/Dedicated-Seedbox/main/Install.sh) &lt; 2023 年 2 月 3 日，有吧友反应脚本的新版本不可用。我也不懂不会改脚本，就把旧版本复刻了一份供大家使用。使用方法：只需要在输入那行命令时把 jerry048 换为 i-abc，即： 1bash &lt;(wget -qO- https://raw.githubusercontent.com/i-abc/Dedicated-Seedbox/main/Install.sh) 如果服务器是 CPX21 的话，可以照抄我的，我 缓存大小 为 1GiB，如图： 具体安装细节 是否安装 qBittorrent？Y： 4.3.9 版本： 是否安装 Deluge？N： 是否安装自动删种？N： 是否安装魔改 BBR？Y： 选第二个： 安装完成，需要输入 1reboot 重启服务器，等一两分钟后我们可以通过 1http://服务器ip:8080 访问 qBittorrent。 qBittorrent 设置登录用户名、密码为是上一步 一键脚本 里的： 进阶优化这是优化版的 qBittorrent，基本设置不用动，我们只需要优化一下高级设置。针对 CPX21，它属于性能强劲的机器，我们只需设置 缓存大小、异步 I/O 线程数这两项： 缓存大小应设置为机器内存大小的 1&#x2F;4 左右。如果你使用的是 qBittorrent 4.3.x, 则需考虑内存溢出的问题并设置缓存大小为机器内存大小的 1&#x2F;8。 异步 I&#x2F;O 线程数的基础设定是 4， 该数值对 HDD 比较友好。如果你使用的是 SSD 甚至是 NVMe 的话, 你可以调整此参数到 8 甚至到16. 缓存大小缓存大小我们在执行一键脚本的时候设置过，选择的是 1 GiB，即图中的 1024 MiB。我们安装的 qBittorrent 版本为 4.3.9，按照文档，缓存大小应设置为机器内存大小的 1&#x2F;8（即 512MiB），但经过我实测，设置为 1 GiB 也行，服务器不会崩溃，所以就保持 1024 MiB 不动： 异步 I&#x2F;O 线程数CPX21 是 Hetzner Cloud 中的一款服务器，硬盘为 NVMe，故异步 I&#x2F;O 线程数我们设置为 16： 添加种子限速我们硬盘只剩 70 GiB，肯定装不完一个完整的大包，所以我们需要拆包，为了便于拆包，我们选择不自动开始。同时做好限速，我限速为 90000 KiB&#x2F;s，求稳： 拆包选部分下载即可： 探针（可选）探针介绍我们可以安装探针来实时监控服务器的运行情况，两个探针可二选一。 哪吒监控 需自建，适合折腾、有基础的人。 Nodepanelshttps://nodepanels.comNodepanels一个注重隐私安全的服务器探针云监控平台，只需要一条指令，就可以轻松掌控服务器。所有服务器统一管理，支持Linux/Windows/MacOS多系统多平台。 无需自建，直接使用，方便。 Nodepanels 使用方法 复制命令并输入： 成功，还可以选择分享给他人查看： 补充说明 吧友建议 亲测 CPX51 全程顶着 125 MB&#x2F;s，CPX41 前 48小时接近满速后逐渐回落，这两个都是能跑满 20T 删机的，再小的 VPS 的话速度掉的快很多，不过价格对应也便宜，怎么选就仁者见仁了。 小硬盘的服务器确实掉速严重，从我选择将 CPX11 这款 40G 硬盘的换为 CPX21 这款 80G 的就可以看出。但我没开 CPX51 那么高配的服务器实测过（因为我没白嫖到试用金，所以扣扣嗖嗖的），全程顶着 125 MB&#x2F;s 这一说法我不能打包票说一定正确，但我感觉是正确的。所以账户试用金余额多的可以开 CPX51 这款试试，CPX51 算下来每 T 上传量的单价可能会更低，而且可以用更少的次数刷更多的上传，省时间来看片，何乐而不为呢。 做快照添加种子试一试下载、上传，如果正常，则把种子删掉，我们该做快照了。 为什么做快照？ 通过做快照，我们可以将服务器当前的状态（已安装好 qBittorrent）记录下来，保存为一个模板；我们可以用这个模板去 “复制” 创建更多相同配置（已安装好 qBittorrent）的服务器，开箱即用，免去了新开服务器需要再执行一键脚本、安装刷流系统这道步骤。 先关机，再做快照： 批量开机镜像选上一步生成的快照，其他选择项和 上文 一样，一下子就能得到多台已安装有 qBittorrent 的服务器，开箱即用，是不是很棒，是不是很爽。 挂载额外的硬盘（可选）一些人可能需要更大的硬盘，比起买有更大硬盘的服务器，我们单独买硬盘来挂载更为划算。 购买硬盘服务器创建好后就可以买硬盘了，我一般选自动挂载： 可以看到我们多出来了一块硬盘： 更改保存路径前往 qBittorrent，将保存路径改为新硬盘的挂载点（我这是改的全局路径，针对所有新种子生效；还可以添加种子时为每个种子选择不同的保存路径）： 更改权限我们添加种子下载，发现报错（此时 Tracker 未报错），说明此时不能写入新硬盘，我们需要更改文件夹的权限。 用 Xftp 这一软件连接服务器，进入 /，更改 mnt 的权限，改为 777，并选择包含子目录： 这下就可以正常下载了： 删机上传跑不动时，我们可以选择删机。为了使所有数据全部汇报上去，我们遵循 暂停种子、等待几分钟、关闭 qBittorrent、分离硬盘（可选）、删除服务器 这一步骤。如图所示就是删机： 至于 IP 删不删，就看你自己的了，不删的话可以避免 IP 频繁变动；IPv4 单价 0.0008 欧元一小时，30 天算下来共 0.576 欧，和 20 欧比起来算九牛一毛。 删机是删除服务器（Delete），而不是关机（Power Off），因为即使关机了也照样计费，只有删机才停止计费。 至于 IP 删不删，就看你自己的了，不删的话可以避免 IP 频繁变动；IPv4 单价 0.0008 欧元一小时，30 天算下来共 0.576 欧，和 20 欧比起来算九牛一毛。 分离硬盘（可选）服务器如果挂载有硬盘，是不能直接删机的，需要先分离硬盘，再删机。如图则是分离硬盘： 硬盘分离下来后是依旧存在且保持计费的，你可以选择留着并挂载到新服务器或者删除。 问与答Sun Oct 30 2022 22:15:02 ⚠ 馒头限速规则：单种上传速度小于 125 M&#x2F;s（即 125 MiB&#x2F;s），非 VIP 超速即封号。我的单种上传速度上限设置为 90000 KiB&#x2F;s，比较保守。 最近大家都开盒子了，再加上现在馒头大包下的人少了，不够分了，掉速严重。 尽量早上车，选大硬盘的服务器，多下点，情况会好些。 Q：需要去站点备案吗？ A：这个问题我不能打包票，我只能说我没备。 Q：已经成功创建了一个服务器，是不是每次刷完要删了，然后刷之前也建？ 感觉有点麻烦。 A：有偷懒方法，可参考 做快照、批量开机、删机 这几部分。 Q：ip 被标盒了怎么办？ A：Hetzner 被标盒是板上钉钉的事，不用担心，不需要做任何措施，被标盒了对我们刷大包一点影响也没有，具体原因见 站点规则。 Q：感觉站点的盒子规则对于分享率来讲话，用盒子还是升不到相应级别。 A：这点不用担心，馒头等级只与分享率挂钩，具体原因见 站点规则。 Q：未联系tracker是啥情况？显示 skipping tracker announce(unreachable)。 A：→ qBittorrent 设置 → 高级，把 验证 HTTPS tracker 证书 取消选择，可参考基本设置。 Q：下了个种子，然后删了，创建完快照二十多个 G 正常吗？ A：这方面我也不懂。我先后创建了两个快照。一个添加种子测试过下载上传，这个快照体积 4.12 GB；另一个没添加种子，其他方面保持不变，这个快照体积 0.91 GB。通过这两个快照创建的机子都正常，且硬盘都剩余 31.7 GB。 Q：qBittorrent 正常上传，Tracker 信息栏显示工作中，且无报错，然而馒头却没有增加上传量。 A：这个问题不止你一个人遇到，我也无法解决，可能是站点 Tracker 服务器方面的问题，你可以问问站点管理员。 Q：请问最终硬盘只剩下不到 1 GB 会影响性能吗？ A：不会，我一般也是只剩这么多；甚至有人把硬盘塞满了也没事，但我没验证过。 Q：在安装好刷流系统后，再次进行 SSH 连接会报如下错误： 12Connecting to 服务器ip:22...Could not connect to &#x27;服务器ip&#x27; (port 22): Connection failed. A：可能是安装刷流系统过程中选择了更换 SSH 端口：把端口号 22 改为 4747 就能连上了： Q：为什么种子上传没速度之后是选择删机而不是重新换一个种子呢？ A：对的，是删机；换种子可以，但没必要，原因如下： 我们可以一次性开多台机子，每台机子刷一个大包。新号配额 5 台机子，等大约半个月后配额就会升级为 10 台了，机子数量不用担心。 如果一个大包已经没上传速度了，那么其他大包也好不到哪里去，刷大包需要越早上车越好。 Q：馒头能同时开几个 qBittorrent？ A： 目前 Tracker 服务器支持单个用户从任意个数的 IP 地址访问站点或上传 &#x2F; 下载。 然而，对于单种上传 &#x2F; 下载是有限制的。 对于每个上传中的种子：同一个种子同时间最多允许 3 个做种的连线； 对于每个下载中的种子：同一个种子同时间最多只允许 1 个下载的连线（这意味着，对于某个种子你一次只能在一个地方下载）。","tags":["PT","盒子"],"categories":["PT"]},{"title":"Markdown For Typora","path":"/blog/2023/02/12/Markdown Reference/","content":"Markdown For TyporaOverviewMarkdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown. [toc] Block ElementsParagraph and line breaksA paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph. Press Shift + Return to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert &lt;br/&gt;. HeadersHeaders use 1-6 hash (#) characters at the start of the line, corresponding to header levels 1-6. For example: 12345# This is an H1## This is an H2###### This is an H6 In Typora, input ‘#’s followed by title content, and press Return key will create a header. BlockquotesMarkdown uses email-style &gt; characters for block quoting. They are presented as: 1234567&gt; This is a blockquote with two paragraphs. This is first paragraph.&gt;&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’. ListsInput * list item 1 will create an unordered list - the * symbol can be replace with + or -. Input 1. list item 1 will create an ordered list - their markdown source code is as follows: 123456789## un-ordered list* Red* Green* Blue## ordered list1. Red2. Green3.\tBlue Task ListTask lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example: 12345- [ ] a task list item- [ ] list syntax required- [ ] normal **formatting**, @mentions, #1234 refs- [ ] incomplete- [x] completed You can change the complete&#x2F;incomplete state by clicking on the checkbox before the item. (Fenced) Code BlocksTypora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported. Using fences is easy: Input ``` and press return. Add an optional language identifier after ``` and we’ll run it through syntax highlighting: 1234567891011121314Here&#x27;s an example:```jsfunction test() &#123; console.log(&quot;notice the blank line before this function?&quot;);&#125;```syntax highlighting:```rubyrequire &#x27;redcarpet&#x27;markdown = Redcarpet.new(&quot;Hello World!&quot;)puts markdown.to_html``` Math BlocksYou can render LaTeX mathematical expressions using MathJax. To add a mathematical expression, input $$ and press the ‘Return’ key. This will trigger an input field which accepts Tex&#x2F;LaTex source. For example: $$\\mathbf{V}_1 \\times \\mathbf{V}_2 &#x3D; \\begin{vmatrix}\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$ In the markdown source file, the math block is a LaTeX expression wrapped by a pair of ‘$$’ marks: 1234567$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 = \\begin&#123;vmatrix&#125;\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$$ You can find more details here. TablesInput | First Header | Second Header | and press the return key. This will create a table with two columns. After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add&#x2F;delete individual columns&#x2F;rows. The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora. In markdown source code, they look like: 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | You can also include inline Markdown such as links, bold, italics, or strikethrough in the table. Finally, by including colons (:) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned: 12345| Left-Aligned | Center Aligned | Right Aligned || :------------ |:---------------:| -----:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column. Footnotes123You can create footnotes like this[^footnote].[^footnote]: Here is the *text* of the **footnote**. will produce: You can create footnotes like this[^footnote]. [^footnote]: Here is the text of the footnote. Hover over the ‘footnote’ superscript to see content of the footnote. Horizontal RulesInputting *** or --- on a blank line and pressing return will draw a horizontal line. YAML Front MatterTypora now supports YAML Front Matter. Input --- at the top of the article and then press Return to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora. Table of Contents (TOC)Input [toc] and press the Return key. This will create a “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document. Span ElementsSpan elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element. LinksMarkdown supports two styles of links: inline and reference. In both styles, the link text is delimited by [square brackets]. To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example: 123This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. will produce: This is an example inline link. (&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;) This link has no title attribute. (&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no) Internal LinksYou can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example: Command(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source. Reference LinksReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link: 12345This is [an example][id] reference-style link.Then, anywhere in the document, you define your link label on a line by itself like this:[id]: http://example.com/ &quot;Optional Title Here&quot; In Typora, they will be rendered like so: This is [an example][id] reference-style link. [id]: http://example.com/\t“Optional Title Here” The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write: 1234[Google][]And then define the link:[Google]: http://google.com/ In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser. URLsTypora allows you to insert URLs as links, wrapped by &lt;brackets&gt;. &lt;i@typora.io&gt; becomes &#105;&#x40;&#116;&#121;&#x70;&#x6f;&#114;&#x61;&#x2e;&#105;&#111;. Typora will also automatically link standard URLs. e.g: www.google.com. ImagesImages have similar syntax as links, but they require an additional ! char before the start of the link. The syntax for inserting an image looks like this: 123![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;) You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing. If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property typora-root-url in YAML Front Matters. For example, input typora-root-url:/User/Abner/Website/typora.io/ in YAML Front Matters, and then ![alt](/blog/img/test.png) will be treated as ![alt](file:///User/Abner/Website/typora.io/blog/img/test.png) in Typora. You can find more details here. EmphasisMarkdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML &lt;em&gt; tag. E.g: 123*single asterisks*_single underscores_ output: single asterisks single underscores GFM will ignore underscores in words, which is commonly used in code and names, like this: wow_great_stuff do_this_and_do_that_and_another_thing. To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it: 1\\*this text is surrounded by literal asterisks\\* Typora recommends using the * symbol. StrongA double * or _ will cause its enclosed contents to be wrapped with an HTML &lt;strong&gt; tag, e.g: 123**double asterisks**__double underscores__ output: double asterisks double underscores Typora recommends using the ** symbol. CodeTo indicate an inline span of code, wrap it with backtick quotes (&#96;). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example: 1Use the `printf()` function. will produce: Use the printf() function. StrikethroughGFM adds syntax to create strikethrough text, which is missing from standard Markdown. ~~Mistaken text.~~ becomes Mistaken text. UnderlinesUnderline is powered by raw HTML. &lt;u&gt;Underline&lt;/u&gt; becomes Underline. Emoji :smile:Input emoji with syntax :smile:. User can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to Edit -&gt; Emoji &amp; Symbols in the menu bar (macOS). Inline MathTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use $ to wrap a TeX command. For example: $\\lim_&#123;x \\to \\infty&#125; \\exp(-x) = 0$ will be rendered as LaTeX command. To trigger inline preview for inline math: input “$”, then press the ESC key, then input a TeX command. You can find more details here. SubscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ~ to wrap subscript content. For example: H~2~O, X~long\\ text~&#x2F; SuperscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ^ to wrap superscript content. For example: X^2^. HighlightTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use == to wrap highlight content. For example: ==highlight==. HTMLYou can use HTML to style content what pure Markdown does not support. For example, use &lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt; to add text with red color. Embed ContentsSome websites provide iframe-based embed code which you can also paste into Typora. For example: 1&lt;iframe height=&#x27;265&#x27; scrolling=&#x27;no&#x27; title=&#x27;Fancy Animated SVG Menu&#x27; src=&#x27;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#x27; frameborder=&#x27;no&#x27; allowtransparency=&#x27;true&#x27; allowfullscreen=&#x27;true&#x27; style=&#x27;width: 100%;&#x27;&gt;&lt;/iframe&gt; VideoYou can use the &lt;video&gt; HTML tag to embed videos. For example: 1&lt;video src=&quot;xxx.mp4&quot; /&gt; Other HTML SupportYou can find more details here.","tags":["Markdown","Typora"],"categories":["Markdown"]},{"title":"Telegram专用代理MTG","path":"/blog/2023/02/11/Telegram-MTG/","content":"一键安装1bash &lt;(wget -qO- https://git.io/mtg.sh) 卸载MTG1systemctl stop mtg &amp;&amp; systemctl disable mtg 删除安装目录1rm -f /usr/local/bin/mtg /lib/systemd/system/mtg.service /etc/mtg.conf","tags":["科学上网","Telegram"],"categories":["科学上网"]},{"title":"魔改版BBR一键安装脚本","path":"/blog/2023/02/11/bbr/","content":"魔改版BBRRoot 用户： 1sudo -i 此脚本可能需要安装: 123Centos ： yum install -y wget curlDebian ： apt install wget curl -yUbuntu： apt-get install wget -y 更新系统： 12yum update -y #CentOS系统命令apt update -y #Debian系统命令 一键安装脚本： 1wget -P /root -N --no-check-certificate &quot;https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh&quot; &amp;&amp; chmod 700 /root/install.sh &amp;&amp; /root/install.sh 备用： 1wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh","tags":["科学上网","BBR"],"categories":["科学上网"]},{"title":"V2Ray、Xray一键安装脚本","path":"/blog/2023/02/11/vless_ws_cdn/","content":"bash&lt;(curl -sL https://raw.githubusercontent.com/hiifeng/v2ray/main/install_v2ray.sh)","tags":["科学上网","V2Ray","Xray"],"categories":["科学上网"]},{"title":"Trojan一键安装脚本","path":"/blog/2023/02/11/trojan-install/","content":"curl-O https://raw.githubusercontent.com/xxxbrian/trojan.sh/main/trojan.sh &amp;&amp; chmod +x trojan.sh &amp;&amp; .&#x2F;trojan.sh","tags":["Trojan","科学上网"],"categories":["科学上网"]},{"title":"AI绘画服务搭建","path":"/blog/2023/02/11/ai-draw/","content":"AI绘画服务安装 安装git：https://git-scm.com/ 安装python：https://www.python.org/ 使用git下载AI：git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git 编辑webui-user.bat：填写python路径和VENV_DIR，运行bat下载依赖 下载AI模型：magnet:?xt=urn:btih:3a4a612d75ed088ea542acac52f9f45987488d1c&amp;dn=sd-v1-4.ckpt&amp;tr=udp%3a%2f%2ftracker.openbittorrent.com%3a6969%2fannounce&amp;tr=udp%3a%2f%2ftracker.opentrackr.org%3a1337 模型放入.\\stable-diffusion-webui\\models\\Stable-diffusion 再次运行webui-user.bat，完成安装","tags":["AI","绘画"],"categories":["人工智能"]},{"title":"示例","path":"/blog/2023/02/11/my/","content":"本文将展示如何使用Webpack来构建特定应用程序。Webpack是strong一个ELM模块加载器和打包工具，可以使我们更轻松地开发应用程序。 一共支持12种颜色，可以满足几乎所有的需求了。color 可设置 red、orange、yellow、green、cyan、blue、purple、light、dark、warning、error 几种取值。 一共支持12种颜色，可以满足几乎所有的需求了。color 可设置 red、orange、yellow、green、cyan、blue、purple、light、dark、warning、error 几种取值。 [title] [icon:src] [desc:true/false]http://example.com/href 不带摘要的样式： https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/ 带摘要的样式： https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/ 这是 密码 标签 这是 下划线 标签 这是 着重号 标签 这是 波浪线 标签 这是 删除线 标签 这是 上角标 标签 这是 下角标 标签 这是 键盘样式 标签，试一试：⌘ + D 前提条件在开始使用Webpack之前，确保您已经安装并且已经正确配置了NodeJS。如果你还没有，请参考此处的说明来进行安装。 安装和配置Webpack 首先，打开您的包管理器并安装Webpack：npm install --save-dev webpack 接下来，在你的项目根目录中创建一个名为webpack.config.js的文件。 在webpack.config.js中，添加以下代码，以设置输出文件的位置： 123456module.exports = &#123; output: &#123; path: __dirname + &#x27;/dist&#x27;, filename: &#x27;bundle.js&#x27; &#125;&#125; 创建应用程序现在你已经安装并配置了Webpack，你可以开始创建你的应用程序的文件系统。 首先，创建一个名为index.html的文件并将以下代码复制到其中： 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Webpack App&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Webpack App&lt;/h1&gt; &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 接着，创建一个src文件夹，并在其中创建一个index.js文件。复制以下代码： 1console.log(&#x27;Hello, world!&#x27;); 构建应用程序现在，你的文件系统已经创建完成，你可以使用Webpack来构建你的应用程序了。 在命令行中运行以下命令： webpack 这将会使Webpack构建你的应用程序，并将其输出到你webpack.config.js文件中设置好的位置：dist/bundle.js。 小结在本文中，我们讨论了如何使用Webpack构建特定应用程序。在开始构建应用程序之前，确保您已经正确安装和配置了NodeJS和Webpack，然后定义应用程序的文件系统，最后使用Webpack来构建应用程序。 文章项目留言GitHub","tags":["Webpack"],"categories":["示例"]},{"title":"关于","path":"/blog/about/index.html","content":"#简介无论有多折腾，我朝梦想前进，不止向往，还要下功夫去追求。在学习的道路上，把脚印留下，把每一点收获都写入笔记本。向着技术的殿堂，自信满满出发，用心去发现，把每一次改变都记录好。无论粗心还是耐心，给自己一个信号，伴着学习的激情，把兴趣做到深处去。这是一个学习记录博客，在这里灌输入知识原素，那些复杂让人困惑的技术，是我们一步一步探究的艺术。在这里，可以体会到技术的魅力，把未来绘就充满乐趣的活动风景。"}]